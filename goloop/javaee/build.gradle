plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs = ['src/java']
        test.java.srcDirs = ['test/java']
    }

    def snapshotSuffix = rootProject.hasProperty('release') ? '' : '-SNAPSHOT'
    group = GROUP
    version = VERSION + snapshotSuffix
}

configure([project(':api'),  project(':rt'), project(':tooling')]) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    def projectName = 'javaee-' + project.name
    def repoUrl = 'https://github.com/icon-project/goloop/tree/master/javaee'
    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "iconfoundation"
                name "icon.foundation"
                email "foo@icon.foundation"
            }
        }
        scm {
            url repoUrl
        }
    }

    publishing {
        repositories {
            maven {
                name = 'mavenCentral'
                def releasesUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsUrl : releasesUrl
                credentials {
                    username = rootProject.hasProperty('mavenCentralUsername') ? "$mavenCentralUsername" : ''
                    password = rootProject.hasProperty('mavenCentralPassword') ? "$mavenCentralPassword" : ''
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                artifactId projectName
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', projectName)
                    root.appendNode('description', 'An Execution Environment for Java SCOREs')
                    root.appendNode('url', repoUrl)
                    root.children().last() + pomConfig
                }
            }
        }
    }

    signing {
        required rootProject.hasProperty('release')
        sign publishing.publications.mavenJava
    }
}

nexusPublishing {
    packageGroup = GROUP
    repositories {
        sonatype {
            stagingProfileId = project.hasProperty('mavenProfileId') ? "$mavenProfileId" : ''
            username = project.hasProperty('mavenCentralUsername') ? "$mavenCentralUsername" : ''
            password = project.hasProperty('mavenCentralPassword') ? "$mavenCentralPassword" : ''
        }
    }
}
